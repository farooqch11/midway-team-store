c
shopify_product
c
local_product.product_id
shopify_product = find_shopify_product(local_product.product_id)
collection
local_product
existing_shopify_product
c
shopify_product
exit
 product.images.select { |image| image.id == variant.image_id }&.first.src
color
c
color
 product.images.select { |image| image.id == variant.image_id }&.first.src
c
color
@i[0].src
@i[0]
@i
@i = product.images.select { |image| image.id == variant.image_id }
@i = product.images.select { |image| image.id == variant.image_id }&.src
@i = product.images.select { |image| image.id == variant.image_id }
product.images[1]
product.images[0]
product.images {|image| imag
product.images {|image| image.id == variant.image_id }
color
variant.image_id
c
product.variants.last
product.variants.first
product.images
    product.options.index { |option| %w[color colour].include?(option['name'].downcase) }&.+1
product.images
product
c
local_shopify_product.update(shopify_id: 9755487863065)
local_shopify_product
new_product.id
new_product
c
new_shopify_product.variants
new_shopify_product
new_product
exit
new_shopify_product.variants
local_product
variant_obj = build_variant(variant, local_product, color_index, selected_color)
variant = shopify_product.variants.first
shopify_product.variants.first
new_shopify_product.options
new_shopify_product
shopify_product.variants
shopify_product
selected_color
color_index
c
shopify_product.options.each_with_index do |option, index|
      options << { name: option['name'] } unless %w[color colour].include?(option['name'].downcase)
    end
    options
options = []
shopify_product.options[0]['name']
shopify_product.options[0].name
shopify_product.options[0]
shopify_product.options.each_with_index do |option, index|
      options << { name: option.name } unless %w[color colour].include?(option.name.downcase)
    end
shopify_product.options.each_with_index do |option, index|
      options << { name: option.name } unless %w[color colour].include?(option['name'].downcase)
    end
shopify_product.options.each_with_index do |option, index|
      options << { name: option.name } unless %w[color colour].include?(option.name.downcase)
    end
build_options(shopify_product)
shopify_product.options
shopify_product
c
product.shopify_products.first.shopify_id
product.shopify_products.first
product.shopify_products.first.get_selected_color.color
product.shopify_products.first.get_selected_color
product.shopify_products.first
product.shopify_products
product.shopify_product
shopify_product
product
existing_product == nil
existing_product
c
shopify_product
shopify_product.shopify_id
c
collection.id
collection
c
product.tags
product
c
variant_image = product.images {|image| image.id == 32446074257470 }&.first.src
product.variants.first.image_id
product.variants.first
product.variants
product
variant_image = product.images {|image| image.variant_ids.include? 41216087687230 }&.first.src
variant_image.first.src
variant_image.src
variant_image.first.src
variant_image = product.images {|image| image.variant_ids.include? 41216087687230 }
variant_image = product.images {|image| image.variant_ids.include? 41216087687230 }&.src
variant_image = product.images {|image| image.variant_ids.include? 41216087687230 }&
variant_image = product.images {|image| image.variant_ids.include? 41216087687230 }.src
variant_image = product.images {|image| image.variant_ids.include? 41216087687230 return image.src}
variant_image = product.images.src {|image| image.variant_ids.include? 41216087687230}
variant_image = product.images {|image| image.variant_ids.include? 41216087687230}
product.images {|image| image.variant_ids.include? 41216087687230}
product.images
product = products.first
products.first.images
products.first.images.length
products.first.images[0].variant_ids.include? 41216087588926
products.first.images[0].variant_ids.contains(41216087588926)
products.first.images[0].variant_ids.includes(41216087588926)
products.first.images[0].variant_ids
products.first.images[0].src
products.first.images[0]
products.first.images
products.first
products
c
product.options.index { |option| %w[color colour].include?(option['name'].downcase) }&.+1
product.options[1]['name']
product.options[1].name
product.options[1]
product.options[0]
product.options
product
c
products
c
ShopifyAPI::CustomCollection.find(id: c)
ShopifyAPI::CustomCollection.find(c)
c =  Integer(collection_id)
c =  Innteger(collection_id)
Integer(c)
Number(c)
c =  collection_id
collection_id
store
store.first
Number(collection_id)
collection_id
Number(collection_id)
ShopifyAPI::CustomCollection.find(collection_id)
collection_id
c
coll.id
coll
coll.id
coll
collection_created
collection_created.save
simple_coll = ShopifyAPI::CustomCollection.new(title: "Test Collection")
c
coll.id
coll
coll.save!
coll.id.save!
coll.id
coll.inspect
c
coll.id
coll
cocoll
continue
next
coll.save
coll
next
coll
next
store
continue
help
continue
help
continue
step
continue
help
helop
.
